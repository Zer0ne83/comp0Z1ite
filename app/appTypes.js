"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractionsArr = exports.CommonWordsArr = exports.defCompzProject = exports.defHomeStates = exports.defAppStates = exports.defCompzAppPaths = void 0;
// AppPaths DEFAULT OBJECT
exports.defCompzAppPaths = { app: null, binary: { ffmpeg: null, ffplay: null, ffprobe: null, ytdl: null }, appData: null, userData: null, desktop: null, documents: null, downloads: null };
//////////////////////////////////////////////////
// AppStates DEFAULT OBJECT
exports.defAppStates = {
    mediaFileExts: {
        audio: ['.mp3', '.aac', '.flac', '.wav', '.aiff', '.dsd', '.pmc', '.mid'],
        subs: ['.srt', '.ssa', '.ttml', '.sbv', '.dfxp', '.vtt', '.txt'],
        video: ['.mpg', '.mpeg', '.mp4', '.mp2', '.webm', '.ogg', '.m4p', '.m4v', '.avi', 'wmv', '.mov']
    },
    isMaxed: false,
    statusBar: { barActionTxt: null, barHATime: '', barHistoryTxt: null, barA2HInProg: false, barA2HAnim: false, barWait: null },
    feIsOpen: false,
    feArrangeWin: 'equal',
    feEqualWinMax: '',
    feItemOrder: { audio: { by: 'type', dir: 'asc' }, subs: { by: 'type', dir: 'asc' }, video: { by: 'type', dir: 'asc' } },
    feTreeOpts: { attributes: ['type', 'extension', 'birthtime', 'atime', 'mtime', 'ctime'], normalizePath: true, depth: 3 },
    feTreeAudio: null,
    feTreeSubs: null,
    feTreeVideo: null,
    feDataStats: { audio: { count: { file: 0, dir: 0 }, size: { no: '', suffix: '' } }, subs: { count: { file: 0, dir: 0 }, size: { no: '', suffix: '' } }, video: { count: { file: 0, dir: 0 }, size: { no: '', suffix: '' } }, all: { count: { file: 0, dir: 0 }, size: { no: '', suffix: '' } } },
    feDirVis: { audio: {}, subs: {}, video: {} },
    feSearch: {
        feShowSearch: false,
        fePreSearchOrder: { audio: { by: 'type', dir: 'asc' }, subs: { by: 'type', dir: 'asc' }, video: { by: 'type', dir: 'asc' } },
        feSearchInProg: false,
        feSearchVal: '',
        feSearchMatches: null,
        feSearchMatchData: null,
        feGhostDirs: {},
        tdData: {
            feSearchTDOpts: { singleSelection: false, idField: 'bdir', textField: 'label', enableCheckAll: false, allowSearchFilter: false, itemsShowLimit: 0, limitSelection: 3, closeDropDownOnSelection: false, showSelectedItemsAtTop: false, defaultOpen: false, allowRemoteDataSearch: false },
            feSearchTDsTrue: [{ bdir: 'audio', label: 'Audio', isDisabled: false }, { bdir: 'subs', label: 'Subs', isDisabled: false }, { bdir: 'video', label: 'Video', isDisabled: false }],
            feSearchTDAll: [{ bdir: 'audio', label: 'Audio', isDisabled: false }, { bdir: 'subs', label: 'Subs', isDisabled: false }, { bdir: 'video', label: 'Video', isDisabled: false }],
            feSearchTDIndic: { audio: true, subs: true, video: true },
            feSearchHideBlock: { audio: false, subs: false, video: false }
        },
        filterData: { feSearchFilters: [], feHasActiveFilters: false, feAFCount: 0, feFilterOut: {} }
    },
    feRename: { feIsRenaming: false, feDidRename: null, feRenameFSInProg: false, feRenameItem: null, feRenameVals: {}, feRenameName: '' }
};
//////////////////////////////////////////////////
// HomeStates DEFAULT OBJECT
exports.defHomeStates = {
    ipRegionLang: { ip: '', city: '', region: '', region_code: '', country: '', country_code: '', languages: '' },
    playerSectionVis: true,
    editorSectionVis: true,
    scraperSectionVis: true,
    sectionHs: { player: 'calc((100vh - 74px) / 3)', editor: 'calc((100vh - 74px) / 3)', scraper: 'calc((100vh - 74px) / 3)' },
    homeFeIsOpen: false,
    playerTabToggle: 'list',
    projectPlaylists: [],
    plHData: { tsize: { no: 0, txt: '-', suffix: '-' }, tdur: { no: 0, txt: '-' } },
    plSort: { by: null, dir: 'asc' },
    plRepeat: true,
    plMarkedItems: {},
    playerFile: null,
    etbAV: { o: { data: null }, n: { data: null }, canEdit: false, hasFocus: false, didChange: false },
    eCmds: { allArr: ['copy', 'cut', 'paste', 'undo', 'redo', 'selectAll'], copy: false, cut: false, paste: false, undo: false, redo: false, selectAll: false },
    tSelO: { txt: '', section: '' },
    editorFile: null,
    editorToolbox: null,
    subBoxLs: { focusin: null, focus: null, focusout: null, blur: null },
    etbSubs: { o: { data: null, counts: { lines: 0, words: 0, chars: 0 } }, n: { data: null, counts: { lines: 0, words: 0, chars: 0 } }, canEdit: false, hasFocus: false, didChange: false, isTyping: false },
    etbSubsReset: { o: { data: null, counts: { lines: 0, words: 0, chars: 0 } }, n: { data: null, counts: { lines: 0, words: 0, chars: 0 } }, canEdit: false, hasFocus: false, didChange: false, isTyping: false },
    etbSelection: '',
    etbFindIsOpen: false,
    etbFindIsCs: false,
    etbFindVal: '',
    etbReplaceVal: '',
    etbLastOState: null,
    etbFindResultsCount: null,
    searchMode: 'search',
    searchSources: [{ id: 'Channels', value: 'channels', checked: true }, { id: 'Playlists', value: 'playlists', checked: true }, { id: 'Videos', value: 'videos', checked: true }],
    scrapeFormat: [{ id: 'Audio', value: 'audio', checked: true }, { id: 'Video', value: 'video', checked: false }, { id: 'Both', value: 'both', checked: false }],
    searchLimits: { scrape: { time: { minutes: 0, seconds: 30 }, data: 250, nolimit: { time: false, data: false } }, search: { maxmatch: 50, maxresolve: 50, orderby: 'relevance' } },
    searchData: [],
    searchSourceResults: { channels: [], playlists: [], videos: [], matches: { c: 0, p: 0, v: 0 } },
    searchStatus: { inProgress: false, isPaused: false, sTime: { date: null, txt: '' }, eTime: { date: null, txt: '' }, startTime: 0, deadlineTime: 0, pauseTimeRemain: 0, pauseTimeExec: 0, counter: { remainTime: 0, remainTStr: '', execTime: 0, execTStr: '' }, progress: { type: 'determinate', buffer: 1, perc: 0, txt: '' }, info: { txt: 'ready/waiting', isErr: false } },
    searchScrapeResHeadsVis: { exact: true, multi: true, single: true },
    searchTerm: { phrase: { q: '', c: { chars: 0, words: 0 } }, wGroups: { q: { exact: '', multi: [], single: [], counts: { exact: 0, multi: 0, single: 0 } } } },
    scrapeTargets: [],
    scrapeTargetCounts: { all: { count: 0, time: { secs: 0, str: '' } }, noCC: { count: 0, time: { secs: 0, str: '' } }, notSel: { count: 0, time: { secs: 0, str: '' } }, ok: { count: 0, time: { secs: 0, str: '' } } },
    resolveMaxNo: 50,
    searchBarHidden: false,
    stProcessProg: { item: { type: 'determinate', buffer: 1, perc: 0, txt: '0%' }, audio: { type: 'determinate', buffer: 1, perc: 0, txt: '0%' }, video: { type: 'determinate', buffer: 1, perc: 0, txt: '0%' } },
    stProcessModes: [{ index: 0, id: 'audio', label: 'audio only' }, { index: 1, id: 'video', label: 'video only' }, { index: 2, id: 'audiovideo', label: 'audio+video' }],
    stProcessMode: { index: 0, id: 'audio', label: 'audio only' },
    rdfSummary: [{ id: 'sub', files: 0, size: '-', wordsdur: '-' }, { id: 'audio', files: 0, size: '-', wordsdur: '-' }, { id: 'video', files: 0, size: '-', wordsdur: '-' }],
    subSearchMatches: { exact: null, multi: [], single: [], counts: { exact: 0, multi: 0, single: 0 } },
    scrapeSnipLimits: { exact: { maxItems: 10, maxLines: 3 }, multi: { maxItems: 3, maxLines: 1 }, single: { maxItems: 1, maxLines: 1 } },
    scrapeSnippets: { exact: [], multi: [], single: [] },
    scrapeSnipResults: { exact: [], multi: [], single: [] }
};
//////////////////////////////////////////////////
// CompzStates DEFAULT OBJECT
exports.defCompzProject = { appStates: exports.defAppStates, homeStates: exports.defHomeStates };
//////////////////////////////////////////////////
exports.CommonWordsArr = ['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'I', 'it', 'for', 'not', 'on', 'with', 'he', 'as', 'you', 'do', 'at', 'this', 'but', 'his', 'by', 'from', 'they', 'we', 'say', 'her', 'she', 'or', 'an', 'will', 'my', 'one', 'all', 'would', 'there', 'their', 'what', 'so', 'up', 'out', 'if', 'about', 'who', 'get', 'which', 'go', 'me', 'when', 'make', 'can', 'like', 'time', 'no', 'just', 'him', 'know', 'take', 'people', 'into', 'year', 'your', 'good', 'some', 'could', 'them', 'see', 'other', 'than', 'then', 'now', 'look', 'only', 'come', 'its', 'over', 'think', 'also', 'back', 'after', 'use', 'two', 'how', 'our', 'work', 'first', 'well', 'way', 'even', 'new', 'want', 'because', 'any', 'these', 'give', 'day', 'most', 'us'];
exports.ContractionsArr = [
    { 'aren\'t': 'are not' },
    { 'can\'t': 'cannot' },
    { 'couldn\'t': 'could not' },
    { 'could\'ve': 'could have' },
    { 'didn\'t': 'did not' },
    { 'doesn\'t': 'does not' },
    { 'don\'t': 'do not' },
    { 'hadn\'t': 'had not' },
    { 'hasn\'t': 'has not' },
    { 'haven\'t': 'have not' },
    { 'he\'d': ['he had', 'he would'] },
    { 'he\'ll': ['he will', 'he shall'] },
    { 'he\'s': ['he is', 'he has'] },
    { 'I\'d': ['I had', 'I would'] },
    { 'I\'ll': ['I will', 'I shall'] },
    { 'I\'m': 'I am' },
    { 'I\'ve': 'I have' },
    { 'isn\'t': 'is not' },
    { 'it\'d': 'it would' },
    { 'it\'ll': ['it shall', 'it will'] },
    { 'it\'s': ['it is', 'it has'] },
    { 'let\'s': 'let us' },
    { 'ma\'am': 'madam' },
    { 'mightn\'t': 'might not' },
    { 'might\'ve': 'might have' },
    { 'mustn\'t': 'must not' },
    { 'must\'ve': 'must have' },
    { 'needn\'t': 'need not' },
    { 'ne\'er': 'never' },
    { 'o\'er': 'over' },
    { 'ol\'': 'old' },
    { 'oughtn\'t': 'ought not' },
    { 'shan\'t': 'shall not' },
    { 'she\'d': ['she had', 'she would'] },
    { 'she\'ll': ['she will', 'she shall'] },
    { 'she\'s': ['she is', 'she has'] },
    { 'shouldn\'t': 'should not' },
    { 'should\'ve': 'should have' },
    { 'that\'d': 'that would' },
    { 'that\'s': ['that is', 'that has'] },
    { 'there\'d': ['there had', 'there would'] },
    { 'there\'ll': ['there shall', 'there will'] },
    { 'there\'s': ['there has', 'there is'] },
    { 'they\'d': ['they had', 'they would'] },
    { 'they\'ll': ['they will', 'they shall'] },
    { 'they\'re': 'they are' },
    { 'they\'ve': 'they have' },
    { '\'twas': 'it was' },
    { 'wasn\'t': 'was not' },
    { 'we\'d': ['we had', 'we would'] },
    { 'we\'ll': 'we will' },
    { 'we\'re': 'we are' },
    { 'we\'ve': 'we have' },
    { 'weren\'t': 'were not' },
    { 'what\'ll': ['what will', 'what shall'] },
    { 'what\'re': 'what are' },
    { 'what\'s': ['what is', 'what has', 'what does'] },
    { 'what\'ve': 'what have' },
    { 'where\'d': 'where did' },
    { 'where\'s': ['where is', 'where has'] },
    { 'who\'d': ['who had', 'who would'] },
    { 'who\'ll': ['who will', 'who shall'] },
    { 'who\'s': ['who is', 'who has'] },
    { 'who\'ve': 'who have' },
    { 'why\'d': 'why did' },
    { 'won\'t': 'will not' },
    { 'wouldn\'t': 'would not' },
    { 'would\'ve': 'would have' },
    { 'you\'d': ['you had', 'you would'] },
    { 'you\'ll': ['you will', 'you shall'] },
    { 'you\'re': 'you are' },
    { 'you\'ve': 'you have' },
    { 'somebody\'s': 'somebody is' },
    { 'someone\'d': ['someone had', 'someone would'] },
    { 'someone\'ll': ['someone shall', 'someone will'] },
    { 'someone\'s': ['someone has', 'someone is'] },
    { 'something\'d': 'something had' },
    { 'something\'ll': ['something shall', 'something will'] },
    { 'something\'s': ['something has', 'something is'] },
    { 'that\'ll': 'that will' },
    { 'there\'d\'ve': 'there would have' },
    { 'there\'re': 'there are' },
    { 'they\'d\'ve': 'they would have' },
    { 'when\'s': 'when is' },
    { 'where\'ve': 'where have' },
    { 'who\'d\'ve': 'who would have' },
    { 'who\'re': 'who are' },
    { 'why\'re': 'why are' },
    { 'why\'s': ['why has', 'why is'] },
    { 'won\'t\'ve': 'will not have' },
    { 'wouldn\'t\'ve': 'would not have' },
    { 'you\'d\'ve': 'you would have' }
];
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//# sourceMappingURL=appTypes.js.map